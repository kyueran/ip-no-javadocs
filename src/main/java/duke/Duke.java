package duke;

import gui.DialogBox;
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.layout.Region;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;
import javafx.scene.control.Button;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.TextField;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.VBox;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;


import duke.commands.Command;
import duke.exceptions.DukeException;
import duke.parser.Parser;
import duke.storage.Storage;
import duke.tasks.TaskList;
import duke.ui.Ui;

/**
 * The Duke class is a chatbot that takes in user input, executes commands, and provides responses based on the input.
 */
public class Duke {

    // `private Storage storage;` is declaring a private instance variable `storage` of type `Storage`. This variable is
    // used to store and retrieve data from a file using the `Storage` class.
    private Storage storage;

    // `private TaskList tasks;` is declaring a private instance variable `tasks` of type `TaskList`. This variable is used
    // to store and manage a list of tasks that the user inputs and interacts with in the chatbot.
    private TaskList tasks;

    // `private Ui ui;` is declaring a private instance variable `ui` of type `Ui`. This variable is used to create an
    // instance of the `Ui` class, which is responsible for handling the user interface of the chatbot. The `ui` variable
    // is used throughout the `Duke` class to display messages and receive input from the user.
    private Ui ui;

    public Duke() {}

    public Duke(String filePath) {
        ui = new Ui();
        storage = new Storage(filePath);
        try {
            tasks = new TaskList(storage.load());
        } catch (DukeException e) {
            ui.showLoadingError();
            tasks = new TaskList();
        }
    }

    /**
     * This function runs a loop that reads user input, parses it, executes the corresponding command, and displays any
     * errors or messages until the user exits the program.
     */
    public void run() {
        ui.showWelcome();
        boolean isExit = false;
        while (!isExit) {
            try {
                String fullCommand = ui.readCommand();
                ui.showLine(); // show the divider line ("_______")
                Command c = Parser.parse(fullCommand);
                c.execute(tasks, ui, storage);
                isExit = c.isExit();
            } catch (DukeException e) {
                ui.showError(e.getMessage());
            } finally {
                ui.showLine();
            }
        }
    }

    /**
     * This function takes in user input, parses it into a command, executes the command, and returns a response or error
     * message.
     *
     * @param input The user input that is passed to the method for processing.
     * @return The method `getResponse` returns a `String` value. The value returned depends on whether the input is
     * successfully parsed and executed as a command or if an exception is thrown. If the input is successfully executed as
     * a command, the method returns the response generated by the UI. If an exception is thrown during parsing or
     * execution, the method returns an error message generated by the UI.
     */
    public String getResponse(String input) {
        try {
            Command c = Parser.parse(input);
            c.execute(tasks, ui, storage);
            return ui.getResponse();
        } catch (DukeException e) {
            return ui.showError((e.getMessage()));
        }
    }
}
